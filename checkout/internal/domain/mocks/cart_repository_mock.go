// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "route256/checkout/internal/model"
)

// CartRepository is an autogenerated mock type for the CartRepository type
type CartRepository struct {
	mock.Mock
}

// CreateCart provides a mock function with given fields: ctx, user
func (_m *CartRepository) CreateCart(ctx context.Context, user model.UserID) (model.UserCartID, error) {
	ret := _m.Called(ctx, user)

	var r0 model.UserCartID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) (model.UserCartID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) model.UserCartID); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(model.UserCartID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserID) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFromCart provides a mock function with given fields: ctx, user, sku, count
func (_m *CartRepository) DeleteFromCart(ctx context.Context, user model.UserCartID, sku model.SKU, count uint16) error {
	ret := _m.Called(ctx, user, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserCartID, model.SKU, uint16) error); ok {
		r0 = rf(ctx, user, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartByUserID provides a mock function with given fields: ctx, userID
func (_m *CartRepository) GetCartByUserID(ctx context.Context, userID model.UserID) (model.UserCartID, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.UserCartID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) (model.UserCartID, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID) model.UserCartID); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.UserCartID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCart provides a mock function with given fields: ctx, cart
func (_m *CartRepository) ListCart(ctx context.Context, cart model.UserCartID) ([]model.CartItem, error) {
	ret := _m.Called(ctx, cart)

	var r0 []model.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserCartID) ([]model.CartItem, error)); ok {
		return rf(ctx, cart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserCartID) []model.CartItem); ok {
		r0 = rf(ctx, cart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CartItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserCartID) error); ok {
		r1 = rf(ctx, cart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrAddToCart provides a mock function with given fields: ctx, cart, sku, count
func (_m *CartRepository) UpdateOrAddToCart(ctx context.Context, cart model.UserCartID, sku model.SKU, count uint16) error {
	ret := _m.Called(ctx, cart, sku, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserCartID, model.SKU, uint16) error); ok {
		r0 = rf(ctx, cart, sku, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCartRepository creates a new instance of CartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartRepository {
	mock := &CartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
