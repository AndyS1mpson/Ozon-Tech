// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "route256/checkout/internal/model"
)

// LomsChecker is an autogenerated mock type for the LomsChecker type
type LomsChecker struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, user, userGoods
func (_m *LomsChecker) CreateOrder(ctx context.Context, user model.UserID, userGoods []model.CartItem) (model.OrderID, error) {
	ret := _m.Called(ctx, user, userGoods)

	var r0 model.OrderID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, []model.CartItem) (model.OrderID, error)); ok {
		return rf(ctx, user, userGoods)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserID, []model.CartItem) model.OrderID); ok {
		r0 = rf(ctx, user, userGoods)
	} else {
		r0 = ret.Get(0).(model.OrderID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserID, []model.CartItem) error); ok {
		r1 = rf(ctx, user, userGoods)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStocksBySKU provides a mock function with given fields: ctx, sku
func (_m *LomsChecker) GetStocksBySKU(ctx context.Context, sku uint32) ([]model.Stock, error) {
	ret := _m.Called(ctx, sku)

	var r0 []model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) ([]model.Stock, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) []model.Stock); ok {
		r0 = rf(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLomsChecker creates a new instance of LomsChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLomsChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *LomsChecker {
	mock := &LomsChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
